{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\nimport \"./PriceConverter.sol\";\r\n\r\nerror FundMe__NotEnoughEth();\r\nerror FundMe__OnlyOwner();\r\nerror FundMe__WithdrawFailed();\r\n\r\ncontract FundMe {\r\n    // using PriceConverter for uint256;\r\n    uint256 private constant MINIMUM_USD = 50;\r\n    address[] s_funders;\r\n    mapping(address => uint256) private addressToFundersArray;\r\n    uint256 private s_priceInUsd;\r\n    AggregatorV3Interface private immutable i_priceFeed;\r\n    address private immutable i_owner;\r\n\r\n    constructor(address priceFeed) {\r\n        i_priceFeed = AggregatorV3Interface(priceFeed);\r\n        i_owner = msg.sender;\r\n    }\r\n\r\n    function fund() public payable {\r\n        s_priceInUsd = PriceConverter.getConversionRate(msg.value, i_priceFeed);\r\n        if (s_priceInUsd < MINIMUM_USD) {\r\n            revert FundMe__NotEnoughEth();\r\n        }\r\n        s_funders.push(msg.sender);\r\n        addressToFundersArray[msg.sender] = msg.value;\r\n    }\r\n\r\n    function withdraw() public {\r\n        address[] memory funders = s_funders;\r\n        if (msg.sender != i_owner) {\r\n            revert FundMe__OnlyOwner();\r\n        }\r\n        for (uint256 i; i < funders.length; i++) {\r\n            address funder = funders[i];\r\n            addressToFundersArray[funder] = 0;\r\n        }\r\n        s_funders = new address[](0);\r\n        (bool success, ) = payable(msg.sender).call{\r\n            value: address(this).balance\r\n        }(\"\");\r\n        if (!success) {\r\n            revert FundMe__WithdrawFailed();\r\n        }\r\n    }\r\n\r\n    function getMininumUsd() public pure returns (uint256) {\r\n        return MINIMUM_USD;\r\n    }\r\n\r\n    function getFunder(uint256 index) public view returns (address) {\r\n        return s_funders[index];\r\n    }\r\n\r\n    function getAddressToFundersArray(\r\n        address index\r\n    ) public view returns (uint256) {\r\n        return addressToFundersArray[index];\r\n    }\r\n\r\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\r\n        return i_priceFeed;\r\n    }\r\n\r\n    function getOnlyOwner() public view returns (address) {\r\n        return i_owner;\r\n    }\r\n}\r\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\nlibrary PriceConverter {\r\n    function getPrice(\r\n        AggregatorV3Interface priceFeed\r\n    ) internal view returns (uint256) {\r\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\r\n        // ETH/USD rate in 18 digit\r\n        return uint256(answer * 10000000000);\r\n    }\r\n\r\n    function getConversionRate(\r\n        uint256 ethAmount,\r\n        AggregatorV3Interface priceFeed\r\n    ) internal view returns (uint256) {\r\n        uint256 ethPrice = getPrice(priceFeed);\r\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\r\n        // the actual ETH/USD conversation rate, after adjusting the extra 0s.\r\n        return ethAmountInUsd;\r\n    }\r\n}\r\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}